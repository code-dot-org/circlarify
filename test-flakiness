#!/usr/bin/env ruby
# Measure flakiness of individual tests over a range of Circle builds

require 'groupdate'
require 'optparse'
require 'ostruct'
require 'parallel'
require 'ruby-progressbar'
require_relative './lib/config'
require_relative './lib/project'
require 'pp'

Groupdate.time_zone = 'Pacific Time (US & Canada)'

CONTAINER = 1
STEP_NAME = 'run ui tests'.freeze

project = Circlarify::Project.new

options = OpenStruct.new
OptionParser.new do |opts|
  opts.banner = 'Usage: ./test-flakiness [options]'

  opts.on(
    '--branch BranchName',
    String,
    'Limit results to builds for one branch.'
  ) do |branch_name|
    options[:branch_name] = branch_name
  end

  opts.on(
    '--test "Test name filter"',
    String,
    'Regular expression for filtering results to a certain test.'
  ) do |test_name_filter|
    options[:test_name_filter] = Regexp.new test_name_filter, Regexp::IGNORECASE
  end

  # Optional argument with keyword completion.
  opts.on(
    '--group-by Period',
    [:day, :week, :month],
    'Select grouping period (day, week, month).'
  ) do |t|
    options.group_by = t
  end

  opts.on(
    '-t',
    'Sort by time instead of flakiness'
  ) do
    options.sort_by_time = true
  end

  opts.on('--verbose') do
    options.verbose = true
  end

  project.provide_cli_options opts
end.parse!

begin
  filter = options.test_name_filter
  puts [
    'Computing flakiness rates',
    filter ? "for test #{filter.source}" : nil,
    options.branch_name ? "on branch #{options.branch_name}" : nil,
    "in builds #{project.build_range}",
    options.group_by ? "grouped by #{options.group_by}" : nil,
    '(1.0 = 100% failures)'
  ].compact.join(' ')

  puts 'Scanning logs...'
  unless options.verbose
    download_progress_bar = ProgressBar.create(total: project.build_range.size)
  end

  test_stats_rollup = {}
  # For now, limit this tool to searching for UI test failures
  Parallel.each(
    project.builds,
    in_processes: Circlarify::Config.instance.parallelism,
    finish: lambda do |_, _, result|
      download_progress_bar.increment if download_progress_bar
      # This block runs in the main thread each time a parallel block returns
      next unless result.is_a? Hash
      result.each do |test_name, stats|
        test_stats_rollup[test_name] ||= {
          started: [],
          failed: [],
          time: [],
        }
        test_stats_rollup[test_name][:started].concat(stats[:started])
        test_stats_rollup[test_name][:failed].concat(stats[:failed])
        test_stats_rollup[test_name][:time].concat(stats[:time])
      end
    end
  ) do |build|
    # Skip this build if it's not on the requested branch
    next unless build.branch? options[:branch_name]

    # Skip this build if it failed. While it may have failed due to flakes, we
    # don't want to count legitmate failures as flakes
    next if build.failed?

    begin
      build_date = build.start_time
      puts "#{build.build_num} #{build_date}" if options.verbose
      output = build.get_log(CONTAINER, STEP_NAME, options.verbose)
      full_output_string = output[0]['message']

      # Find every time a test we care about was started
      test_starts = full_output_string
                    .scan(/cucumber.*--out log\/(\S+)_output\.html/)
                    .map { |matches| matches[0] }
                    .select do |name|
                      options[:test_name_filter].nil? ||
                        name =~ options[:test_name_filter]
                    end

      # Build a metadata map of tests
      tests = test_starts.each_with_object({}) do |name, sums|
        sums[name] ||= { started: [], failed: [], time: [] }
        sums[name][:started].push(build_date)
      end

      # Find all failures, and add them to our test data
      full_output_string
        .scan(/UI tests failed with <b>(\w+)<.b>/)
        .map { |matches| matches[0] }
        .each do |name|
          tests[name][:failed].push(build_date) if tests[name]
        end

      # Find all completions, add the times to our data
      full_output_string
        .scan(/\[\S+\] UI tests for (\S*) .* \((\S+) minutes/)
        .each do |name, time|
          tests[name] ||= { started: [], failed: [], time: [] }
          parts = time.split(':')
          if tests[name]
            tests[name][:time].push(parts[0].to_i * 60 + parts[1].to_i)
          end
        end

      # 3. Report back to main thread:
      tests
    rescue => e
      STDERR.puts e if options.verbose
    end
  end
  download_progress_bar.finish if download_progress_bar
rescue ArgumentError => e
  puts e.message
  exit(-1)
end

def flakiness_for_whole_sample(test_stats)
  start_count = test_stats[:started].size
  failure_count = test_stats[:failed].size
  time = -1
  if test_stats[:time].any?
    time = test_stats[:time].inject(:+) / test_stats[:time].size
  end
  {
    flakiness: failure_count.to_f / start_count,
    sample_size: start_count,
    time: time,
  }
end

def flakiness_by_period(test_stats, period)
  starts_by_period = test_stats[:started].send("group_by_#{period}") { |x| x }
  failures_by_period = test_stats[:failed].send("group_by_#{period}") { |x| x }
  stats_by_period = starts_by_period.map do |k, v|
    failure_count = failures_by_period[k].try(:size) || 0
    [k, {
      flakiness: failure_count.to_f / v.size,
      sample_size: v.size
    }]
  end
  Hash[stats_by_period]
end

if options.group_by
  test_stats_rollup.each do |test_name, stats|
    puts test_name
    pp flakiness_by_period(stats, options.group_by)
  end
else
  sort_key = options.sort_by_time ? :time : :flakiness
  test_stats_ordered = test_stats_rollup
                       .map { |k, v| [k, flakiness_for_whole_sample(v)] }
                       .sort { |a, b| b[1][sort_key] <=> a[1][sort_key] }
  puts 'Flake  Time     n Test Name'
  test_stats_ordered.each do |row|
    time = '--:--'
    if row[1][:time] != -1
      minutes = row[1][:time] / 60
      seconds = row[1][:time] % 60
      time = format('%02d:%02d', minutes, seconds)
    end
    puts format('%1.3f  %s %4d %s',
                row[1][:flakiness],
                time,
                row[1][:sample_size],
                row[0])
  end
end
