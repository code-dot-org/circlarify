#!/usr/bin/env ruby
# A script to analyze a range of CircleCI builds for known failures.
# For available options, run ./search-circle-builds -h

require 'optparse'
require 'parallel'
require_relative './lib/config'
require_relative './lib/project'

RUN_UI_TESTS_STEP_STRING = 'run_ui_tests'.freeze
RUN_UI_TESTS_CONTAINER = 0

KNOWN_FAIL_TYPES = [
  {
    search_string: 'ConnectionTimeoutError',
    step_string: RUN_UI_TESTS_STEP_STRING,
    container: RUN_UI_TESTS_CONTAINER
  },
  {
    search_string: 'io_fillbuf',
    step_string: RUN_UI_TESTS_STEP_STRING,
    container: RUN_UI_TESTS_CONTAINER
  },
  {
    search_string: 'invalid base64',
    step_string: RUN_UI_TESTS_STEP_STRING,
    container: RUN_UI_TESTS_CONTAINER
  }
].freeze

project = Circlarify::Project.new

options = {}
OptionParser.new do |opts|
  opts.banner = 'Usage: ./search-circle-builds [options]'

  opts.on('--grep "String to Search for"',
          String,
          'Search for given string.') do |grep_string|
    options[:grep_string] = grep_string
  end
  opts.on('--whole-lines',
          TrueClass,
          'Print entire lines of found strings in output.') do |is_true|
    options[:whole_lines] = is_true
  end
  opts.on('--count',
          TrueClass,
          'Counts number of found strings in output.') do |is_true|
    options[:count] = is_true
  end
  opts.on('--grep-container ',
          String,
          'Search given container # for grep string.') do |grep_container|
    options[:grep_container] = grep_container.to_i
  end
  options[:grep_container] ||= RUN_UI_TESTS_CONTAINER
  opts.on('--grep-step ',
          String,
          'Search given step (substring) for grep string.') do |grep_step|
    options[:grep_step] = grep_step
  end
  options[:grep_step] ||= RUN_UI_TESTS_STEP_STRING
  opts.on('--branch BranchName',
          String,
          'Limit results to builds for one branch.') do |branch_name|
    options[:branch_name] = branch_name
  end

  project.provide_cli_options opts
end.parse!

fail_types_to_check = KNOWN_FAIL_TYPES

if options[:grep_string]
  fail_types_to_check = [{
    search_string: options[:grep_string],
    step_string: options[:grep_step],
    container: options[:grep_container]
  }]
end

def describe_fail_type(f)
  "#{f[:search_string]} in container #{f[:container]} step #{f[:step_string]}"
end

begin
  fail_types_list = fail_types_to_check.map { |f| describe_fail_type(f) }
                                       .join "\n"
  puts "Checking builds #{project.build_range} for output:\n#{fail_types_list}"
  puts "Limited to branch: #{options[:branch_name]}" if options[:branch_name]

  Parallel.each(
    project.builds,
    in_processes: Circlarify::Config.instance.parallelism
  ) do |build|
    fail_types_to_check.each do |known_fail|
      # Skip this build if it's not on the requested branch
      next unless build.branch? options[:branch_name]

      output = build.get_log(known_fail[:container], known_fail[:step_string])
      next if output.nil?

      begin
        full_output_string = output[0]['message']
        if full_output_string.include? known_fail[:search_string]
          if options[:count]
            count = full_output_string.split("\n").count do |line|
              line.include? known_fail[:search_string]
            end
            puts "Build #{build.url} output contains #{count} of: "\
              "#{known_fail[:search_string]}"
          elsif options[:whole_lines]
            lines = []
            full_output_string.split("\n").each do |line|
              lines << line if line.include? known_fail[:search_string]
            end
            puts "Build #{build.url} output contains lines:"
            lines.each { |l| puts l }
          else
            puts "Build #{build.url} output contains:"\
              "#{known_fail[:search_string]}"
          end
        end
      rescue => e
        STDERR.puts e
      end
    end
  end
rescue ArgumentError => e
  puts e.message
  exit(-1)
end

exit(0)
