#!/usr/bin/env ruby
# A script to analyze a range of CircleCI builds for known failures.
# For available options, run ./search-circle-builds -h

require 'active_support/time'
require 'launchy'
require 'optparse'
require_relative './lib/project'

project = Circlarify::Project.new

# Augment Hash with hmap function
class Hash
  # Like Enumerable::map but returns a Hash instead of an Array
  def hmap(&_)
    Hash[map { |k, v| yield k, v }]
  end
end

OUTPUT_DIRECTORY = File.expand_path('~/.circle-cli/output').freeze

options = {
  output_format: 'human-readable',
  custom_columns: []
}
OptionParser.new do |opts|
  opts.banner = 'Usage: ./compute-failure-rates [options]'

  opts.on('--group branchName,branchName',
          Array,
          'Add a column aggregating results for the listed branches.') do |a|
    options[:custom_columns] << a
  end
  opts.on('--branch branchName',
          String,
          'ONLY show results for the given branch.') do |b|
    options[:branch] = b
  end
  opts.on('--csv', 'Display results in CSV format.') do
    options[:output_format] = 'csv'
  end
  opts.on('--plot', 'Display results as a graph') do
    options[:output_format] = :plot
  end

  project.provide_cli_options opts
end.parse!

build_infos = []
begin
  # Download and format the build information we need
  build_infos = project.builds.map do |build|
    next if build.queued_at.nil? || build.branch.nil? || build.outcome.nil?
    {
      build_num: build.build_num,
      queued_at: build.queued_at,
      branch: build.branch,
      succeeded: build.succeeded?,
      failed: build.failed?
    }
  end
rescue ArgumentError => e
  puts e.message
  exit(-1)
end

# Group the builds by date
builds_by_date = build_infos.compact.group_by do |build_info|
  build_info[:queued_at]
    .to_time
    .in_time_zone('Pacific Time (US & Canada)')
    .strftime('%Y-%m-%d')
end

# Define columns - each maps to a lambda that filters builds
columns = {
  'Total' => ->(builds) { builds },
  'Pipeline' => lambda do |builds|
    builds.select { |i| %w(staging test production).include?(i[:branch]) }
  end,
  'Branch' => lambda do |builds|
    builds.reject { |i| %w(staging test production).include?(i[:branch]) }
  end
}
options[:custom_columns].each do |branches|
  columns[branches.join(',')] = lambda do |builds|
    builds.select { |i| branches.include?(i[:branch]) }
  end
end
# Or only show one branch if we passed the branch option
unless options[:branch].nil?
  columns = {
    options[:branch] => lambda do |builds|
      builds.select { |i| i[:branch] == options[:branch] }
    end
  }
end

# Compute map of stats for each date
stats_by_date = builds_by_date.hmap do |date, build_infos_for_date|
  [
    date,
    columns.hmap do |name, column|
      builds = column.call build_infos_for_date
      succeeded_builds = builds.select { |i| i[:succeeded] }.count
      failed_builds = builds.select { |i| i[:failed] }.count
      [
        name,
        {
          total_builds: succeeded_builds + failed_builds,
          failed_builds: failed_builds,
          failure_rate: failed_builds.to_f / (succeeded_builds + failed_builds)
        }
      ]
    end
  ]
end

# Print build stats
puts "Failure rates for builds #{project.build_range} by date "\
  '(1.0 = 100% failures)'
if options[:output_format] == 'csv'
  puts format("%s#{',%s' * columns.size}", 'Date', *columns.keys)
  stats_by_date.each do |date, stats|
    row_of_stats = stats.map { |_, v| v[:failure_rate].round(3) }
    puts format("%s#{',%.3f' * columns.size}", date, *row_of_stats)
  end

elsif options[:output_format] == :plot

  #
  # Display a graph of failure rates over time
  #

  raise Exception, 'Must provide a --branch to plot' if options[:branch].nil?

  # Make sure weekends are included, and show up as zero
  dates = stats_by_date.keys.map do |d|
    DateTime.strptime("#{d} -8", '%Y-%m-%d %z')
  end
  ordered_stats = []
  (dates.min..dates.max).each do |date|
    if [0, 6].include? date.wday
      ordered_stats << {
        date: date,
        total_builds: 0,
        failed_builds: 0
      }
    else
      branch_stats = stats_by_date[date.strftime('%Y-%m-%d')][options[:branch]]
      ordered_stats << {
        date: date,
        total_builds: branch_stats[:total_builds],
        failed_builds: branch_stats[:failed_builds]
      }
    end
  end

  js_data = "[\n"
  js_data += "['Date', 'Failures', 'Successes'],\n"
  ordered_stats.each do |stats|
    js_build_time = stats[:date].strftime('"%b %d"')
    js_failures = stats[:failed_builds]
    js_successes = stats[:total_builds] - stats[:failed_builds]

    js_data += "[#{js_build_time}, #{js_failures}, #{js_successes}],\n"
  end
  js_data += "]\n"

  title = "Circle CI #{options[:branch]} builds by outcome for "\
    "#{dates.min.strftime('%Y-%m-%d')}..#{dates.max.strftime('%Y-%m-%d')} "\
    "(builds #{project.restricted_build_range})"

  # Write out plot
  # https://developers.google.com/chart/interactive/docs/gallery/areachart
  FileUtils.mkdir_p OUTPUT_DIRECTORY
  path = "#{OUTPUT_DIRECTORY}/failure-rates.html"
  File.open(path, 'w') do |file|
    file.write <<-FILE
<html>
  <head>
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">
      google.charts.load('current', {'packages':['corechart']});
      google.charts.setOnLoadCallback(drawChart);

      function drawChart() {
        var data = google.visualization.arrayToDataTable(#{js_data});

        var options = {
          title: '#{title}',
          hAxis: {title: 'Build date',  titleTextStyle: {color: '#333'}, showTextEvery: 2},
          colors: ['#C40000', '#7FB900'],
          isStacked: true
        };

        var chart = new google.visualization.SteppedAreaChart(document.getElementById('chart_div'));
        chart.draw(data, options);
      }
    </script>
  </head>
  <body>
    <div id="chart_div" style="width: 100%; height: 900px;"></div>
  </body>
</html>
    FILE
  end
  Launchy.open(path)

else

  column_names = columns.keys.map { |k| k[0, 14] }
  puts format("%-10s#{' %16s' * columns.size}", 'Date', *column_names)
  stats_by_date.each do |date, stats|
    row_of_stats = stats.map do |_, v|
      [
        format('%s/%s', v[:failed_builds], v[:total_builds]),
        v[:failure_rate].round(3)
      ]
    end.flatten
    puts format(
      "%-10s#{'  %7s = %5.3f' * columns.size}",
      date,
      *row_of_stats
    )
  end
end

exit(0)
